# Stock Market Education Game (Web App with Charts)
# Teaches concepts: Liquidity Grabs, FVG, BOS, ORB

import streamlit as st
import random
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import mplfinance as mpf

# Concepts
concepts = {
    "Liquidity Grab": "A liquidity grab happens when price moves beyond a recent high/low to trap traders, then reverses.",
    "FVG": "Fair Value Gap (FVG) is an imbalance between buyers and sellers visible as a gap in price.",
    "BOS": "Break of Structure (BOS) occurs when price breaks a key high or low, indicating a trend change.",
    "ORB": "Opening Range Breakout (ORB) is a strategy using the high and low of the first few minutes after market open."
}

# Game state
if 'balance' not in st.session_state:
    st.session_state.balance = 10000
if 'scenario_index' not in st.session_state:
    st.session_state.scenario_index = 0

scenarios = [
    {
        "name": "Liquidity Grab - Short Setup",
        "description": "Price swept above previous high and closed back inside range.",
        "entry": "short",
        "good_exit": "at previous low",
        "bad_exit": "holding through reversal",
        "chart": "liquidity"
    },
    {
        "name": "FVG Long Setup",
        "description": "Price pulled into FVG and bounced.",
        "entry": "long",
        "good_exit": "at supply zone",
        "bad_exit": "holding through FVG close",
        "chart": "fvg"
    },
    {
        "name": "BOS Confirmation",
        "description": "Structure broke to upside after a higher low.",
        "entry": "long",
        "good_exit": "at next swing high",
        "bad_exit": "entering before BOS",
        "chart": "bos"
    },
    {
        "name": "ORB Failure",
        "description": "Price broke opening range high but reversed hard.",
        "entry": "long",
        "good_exit": "quick scalp on breakout",
        "bad_exit": "holding during pullback",
        "chart": "orb"
    }
]

# Generate candlestick data

def generate_ohlc_data():
    base_price = 100
    data = []
    for _ in range(20):
        open_price = base_price + np.random.uniform(-2, 2)
        high_price = open_price + np.random.uniform(0, 3)
        low_price = open_price - np.random.uniform(0, 3)
        close_price = low_price + np.random.uniform(0, high_price - low_price)
        base_price = close_price  # chain next open
        data.append([open_price, high_price, low_price, close_price])
    df = pd.DataFrame(data, columns=['Open', 'High', 'Low', 'Close'])
    df.index = pd.date_range(end=pd.Timestamp.today(), periods=len(df), freq='T')
    return df

# Chart renderers

def plot_chart(chart_type):
    df = generate_ohlc_data()
    addplots = []

    if chart_type == "liquidity":
        df.iloc[6]['High'] += 5
        df.iloc[7]['Close'] -= 6
        title = "Liquidity Grab Example"

    elif chart_type == "fvg":
        df.iloc[4]['Low'] -= 4
        df.iloc[5]['High'] += 5
        title = "FVG Example"

    elif chart_type == "bos":
        df.iloc[5:] += 6
        title = "Break of Structure (BOS)"

    elif chart_type == "orb":
        orb_low = df.iloc[0:3]['Low'].min()
        orb_high = df.iloc[0:3]['High'].max()
        addplots = [
            mpf.make_addplot([orb_low]*len(df), color='purple'),
            mpf.make_addplot([orb_high]*len(df), color='orange')
        ]
        title = "Opening Range Breakout (ORB)"

    st.subheader(title)
    fig, _ = mpf.plot(df, type='candle', style='charles', addplot=addplots, returnfig=True)
    st.pyplot(fig)

# Display game UI

def show_game():
    st.title("Stock Market Game with Visual Learning")
    st.subheader(f"Balance: ${st.session_state.balance}")
    st.markdown("---")
    st.subheader("ðŸ“˜ Market Concepts")
    for key, val in concepts.items():
        with st.expander(key):
            st.write(val)

    st.markdown("---")

    if st.session_state.scenario_index < len(scenarios):
        scenario = scenarios[st.session_state.scenario_index]
        st.header(scenario['name'])
        st.write(scenario['description'])

        plot_chart(scenario['chart'])

        entry = st.radio("Choose your entry:", ["long", "short", "skip"], key=f"entry_{st.session_state.scenario_index}")
        exit_choice = st.radio("Choose your exit strategy:", ["smart", "greedy"], key=f"exit_{st.session_state.scenario_index}")

        if st.button("Submit Decision"):
            result = ""
            if entry == "skip":
                result = "Skipped the trade."
            elif entry != scenario['entry']:
                result = "Wrong entry type. You entered against the setup."
                st.session_state.balance -= 300
            elif exit_choice == "smart":
                result = f"Smart exit at {scenario['good_exit']}!"
                st.session_state.balance += 500
            else:
                result = f"Poor exit at {scenario['bad_exit']}!"
                st.session_state.balance -= 200

            st.success(result)
            st.session_state.scenario_index += 1
            st.stop()  # safe rerun alternative

    else:
        st.header("Game Over")
        st.subheader(f"Final Balance: ${st.session_state.balance}")
        if st.session_state.balance > 10000:
            st.success("Well done! You made profitable decisions.")
        else:
            st.error("You need more practice. Review the concepts and try again.")

if __name__ == '__main__':
    show_game()

