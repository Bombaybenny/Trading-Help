# Stock Market Education Game (Web App with Charts)
# Teaches concepts: Liquidity Grabs, FVG, BOS, ORB

import streamlit as st
import random
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import mplfinance as mpf

# Concepts
concepts = {
    "Liquidity Grab": "A liquidity grab happens when price moves beyond a recent high/low to trap traders, then reverses.",
    "FVG": "Fair Value Gap (FVG) is an imbalance between buyers and sellers visible as a gap in price.",
    "BOS": "Break of Structure (BOS) occurs when price breaks a key high or low, indicating a trend change.",
    "ORB": "Opening Range Breakout (ORB) is a strategy using the high and low of the first few minutes after market open."
}

# Game state
if 'balance' not in st.session_state:
    st.session_state.balance = 10000
if 'scenario_index' not in st.session_state:
    st.session_state.scenario_index = 0
if 'theme' not in st.session_state:
    st.session_state.theme = 'dark'
if 'timeframe' not in st.session_state:
    st.session_state.timeframe = '1min/5days'

# Stock selection
stock_options = ['AVGO', 'NVDA', 'TSLA']
selected_stock = st.sidebar.selectbox("Choose a stock to view:", stock_options)

# Timeframe selection
timeframe_options = ['1min/5days', '5min/5days', '15min/5days']
st.session_state.timeframe = st.sidebar.selectbox("Timeframe:", timeframe_options)

# Theme switch
st.sidebar.markdown("### Theme")
if st.sidebar.toggle("Dark Mode", value=st.session_state.theme == 'dark'):
    st.session_state.theme = 'dark'
else:
    st.session_state.theme = 'light'

# Styling
style = 'charles' if st.session_state.theme == 'light' else 'nightclouds'

# Scenarios with level-specific questions
scenarios = [
    {
        "name": "Liquidity Grab - Short Setup",
        "description": "Price swept above previous high and closed back inside range.",
        "questions": [
            "What is a liquidity grab?",
            "Where did the liquidity grab occur on this chart?",
            "What should you look for after a liquidity grab?"
        ],
        "answers": ["Trap beyond a high/low", "Above recent high", "Reversal setup"],
        "correct_entry": "short",
        "correct_exit": "smart",
        "chart": "liquidity"
    },
    {
        "name": "FVG Long Setup",
        "description": "Price pulled into FVG and bounced.",
        "questions": [
            "What defines a Fair Value Gap?",
            "Where is the imbalance in this chart?",
            "What typically happens after price enters an FVG?"
        ],
        "answers": ["Gap between candles", "Middle of the run", "Continuation"],
        "correct_entry": "long",
        "correct_exit": "smart",
        "chart": "fvg"
    },
    {
        "name": "BOS Confirmation",
        "description": "Structure broke to upside after a higher low.",
        "questions": [
            "What is a Break of Structure?",
            "Where is the BOS in this chart?",
            "What does BOS signal?"
        ],
        "answers": ["Break of high/low", "After higher low", "Trend change"],
        "correct_entry": "long",
        "correct_exit": "smart",
        "chart": "bos"
    },
    {
        "name": "ORB Failure",
        "description": "Price broke opening range high but reversed hard.",
        "questions": [
            "What is the Opening Range?",
            "Where is the breakout?",
            "What would confirm failure?"
        ],
        "answers": ["First few minutes", "Above high", "Strong rejection"],
        "correct_entry": "long",
        "correct_exit": "smart",
        "chart": "orb"
    }
]

# Generate candlestick data

def generate_ohlc_data():
    base_price = 100 + random.randint(-10, 10)
    data = []
    for _ in range(30):
        open_price = base_price + np.random.uniform(-2, 2)
        high_price = open_price + np.random.uniform(0, 3)
        low_price = open_price - np.random.uniform(0, 3)
        close_price = np.random.uniform(low_price, high_price)
        base_price = close_price
        data.append([open_price, high_price, low_price, close_price])
    df = pd.DataFrame(data, columns=['Open', 'High', 'Low', 'Close'])
    df.index = pd.date_range(end=pd.Timestamp.today(), periods=len(df), freq='T')
    return df

# Chart renderers

def plot_chart(chart_type):
    df = generate_ohlc_data()
    addplots = []

    if chart_type == "liquidity":
        df.iloc[6]['High'] += 5
        df.iloc[7]['Close'] -= 6
        title = f"{selected_stock} - Liquidity Grab"

    elif chart_type == "fvg":
        df.iloc[4]['Low'] -= 4
        df.iloc[5]['High'] += 5
        title = f"{selected_stock} - Fair Value Gap (FVG)"

    elif chart_type == "bos":
        df.iloc[5:] += 6
        title = f"{selected_stock} - Break of Structure (BOS)"

    elif chart_type == "orb":
        orb_low = df.iloc[0:3]['Low'].min()
        orb_high = df.iloc[0:3]['High'].max()
        addplots = [
            mpf.make_addplot([orb_low]*len(df), color='purple'),
            mpf.make_addplot([orb_high]*len(df), color='orange')
        ]
        title = f"{selected_stock} - Opening Range Breakout (ORB)"

    elif chart_type == "support":
        df.iloc[10:15]['Low'] -= 2
        df.iloc[20:25]['High'] += 2
        title = f"{selected_stock} - Support and Resistance"

    st.subheader(title + f" | {st.session_state.timeframe}")
    fig, _ = mpf.plot(df, type='candle', style=style, addplot=addplots, returnfig=True)
    st.pyplot(fig)

# Display game UI

def show_game():
    st.title("📈 Stock Market Game (Learn to Trade Real Patterns)")
    st.subheader(f"Balance: ${st.session_state.balance}")
    st.markdown("---")
    st.subheader("📘 Market Concepts")
    for key, val in concepts.items():
        with st.expander(key):
            st.write(val)

    st.markdown("---")

    if st.session_state.scenario_index < len(scenarios):
        scenario = scenarios[st.session_state.scenario_index]
        st.header(f"Level {st.session_state.scenario_index + 1}: {scenario['name']}")
        st.write(scenario['description'])

        plot_chart(scenario['chart'])

        for i, q in enumerate(scenario['questions']):
            st.radio(q, ["Select one...", scenario['answers'][i]], key=f"q_{st.session_state.scenario_index}_{i}")

        entry = st.radio("What's the correct entry for this setup?", ["long", "short", "skip"], key=f"entry_{st.session_state.scenario_index}")
        exit_choice = st.radio("Best exit strategy:", ["smart", "greedy"], key=f"exit_{st.session_state.scenario_index}")

        if st.button("Submit Decision"):
            result = ""
            if entry == "skip":
                result = "Skipped the trade."
            elif entry != scenario['correct_entry']:
                result = "Wrong entry type. You entered against the setup."
                st.session_state.balance -= 300
            elif exit_choice == scenario['correct_exit']:
                result = "✅ Smart exit!"
                st.session_state.balance += 500
            else:
                result = "⚠️ Poor exit."
                st.session_state.balance -= 200

            st.success(result)
            st.session_state.scenario_index += 1
            st.experimental_rerun()
    else:
        st.header("🎉 Game Over")
        st.subheader(f"Final Balance: ${st.session_state.balance}")
        if st.session_state.balance > 10000:
            st.success("Well done! You made profitable decisions.")
        else:
            st.error("You need more practice. Review the concepts and try again.")

if __name__ == '__main__':
    show_game()
